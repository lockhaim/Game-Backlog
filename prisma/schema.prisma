generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  relationMode = "foreignKeys"
}

/* -------------------- Enums -------------------- */

enum BacklogStatus {
  BACKLOG
  WISHLIST
  PLAYING
  PAUSED
  FINISHED
  DROPPED
}

/* -------------------- Core Models -------------------- */

model User {
  id              String         @id @default(cuid())
  email           String         @unique
  name            String?
  image           String?

  // Relations
  backlogEntries  BacklogEntry[] @relation("UserBacklogEntries")
  userTags        UserTag[]

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Game {
  id                  String          @id @default(cuid())

  // Steam linkage
  steamAppId          Int?            @unique
  slug                String          @unique

  // Display / metadata
  title               String
  summary             String?
  headerImageUrl      String?
  capsuleImageUrl     String?

  // Release / reviews
  releaseDate         DateTime?
  comingSoon          Boolean?        @default(false)
  metacriticScore     Int?
  steamReviewPercent  Int?
  steamReviewCount    Int?
  steamReviewLabel   String?  @db.VarChar(64)

  // “Recently played”
  playtimeMinutes     Int?            // lifetime minutes from Steam (optional)
  lastPlayedAt        DateTime?       // last_played -> Date

  // Relations
  tags                GameTag[]
  platforms           GamePlatform[]
  screenshots         Screenshot[]
  reviewSnippets      ReviewSnippet[]
  backlogEntries      BacklogEntry[]  @relation("GameBacklogEntries")

  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  @@index([releaseDate])
  @@index([lastPlayedAt])
  @@index([steamReviewPercent, steamReviewCount])
}

/* -------------------- Vocab Models -------------------- */

model Tag {
  id      String     @id @default(cuid())
  name    String     @unique
  label   String?

  games   GameTag[]
}

model Platform {
  id      String     @id @default(cuid())
  name    String     @unique
  label   String?

  games   GamePlatform[]
}

/* -------------------- Join Tables -------------------- */

model GameTag {
  gameId  String
  tagId   String

  game    Game @relation(fields: [gameId], references: [id], onDelete: Cascade)
  tag     Tag  @relation(fields: [tagId],  references: [id], onDelete: Cascade)

  @@id([gameId, tagId])
  @@unique([gameId, tagId])
  @@index([tagId])
}

model GamePlatform {
  gameId     String
  platformId String

  game       Game     @relation(fields: [gameId],     references: [id], onDelete: Cascade)
  platform   Platform @relation(fields: [platformId], references: [id], onDelete: Cascade)

  @@id([gameId, platformId])
  @@unique([gameId, platformId])
  @@index([platformId])
}

/* -------------------- Media / Reviews -------------------- */

model Screenshot {
  id           String   @id @default(cuid())
  gameId       String
  sortIndex    Int      @default(0)
  imageUrl     String
  thumbnailUrl String?

  game         Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([gameId, sortIndex])
}

model ReviewSnippet {
  id        String   @id @default(cuid())
  gameId    String
  source    String?  // e.g. "PC Gamer", "IGN"
  quote     String
  url       String?

  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([gameId])
}

/* -------------------- Backlog / User Data -------------------- */

model BacklogEntry {
  id            String        @id @default(cuid())

  userId        String
  gameId        String

  status        BacklogStatus @default(BACKLOG)
  priority      Int?          // 1..5 or any scale you like
  category      String?       // free-text or enum later (e.g., “Story”, “Multiplayer”)
  notes         String?

  // Optional per-user timing
  startedAt     DateTime?
  finishedAt    DateTime?
  lastSessionAt DateTime?

  user          User          @relation("UserBacklogEntries", fields: [userId], references: [id], onDelete: Cascade)
  game          Game          @relation("GameBacklogEntries", fields: [gameId], references: [id], onDelete: Cascade)

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@unique([userId, gameId])   // one entry per user/game
  @@index([status, priority])
  @@index([userId])
  @@index([gameId])
}

model UserTag {
  id        String   @id @default(cuid())
  userId    String
  name      String   // e.g. “Backlog 2025”, “Co-op”, “JRPG”
  color     String?  // hex or token for UI

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
  @@index([userId])
}